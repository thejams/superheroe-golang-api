// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "superheroe-api/superheroe-golang-api/src/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddSuperheroe provides a mock function with given fields: c, ctx
func (_m *Repository) AddSuperheroe(c *entity.Superhero, ctx context.Context) (*entity.Superhero, error) {
	ret := _m.Called(c, ctx)

	var r0 *entity.Superhero
	if rf, ok := ret.Get(0).(func(*entity.Superhero, context.Context) *entity.Superhero); ok {
		r0 = rf(c, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Superhero)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Superhero, context.Context) error); ok {
		r1 = rf(c, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSuperheroe provides a mock function with given fields: id, ctx
func (_m *Repository) DeleteSuperheroe(id string, ctx context.Context) (string, error) {
	ret := _m.Called(id, ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, context.Context) string); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditSuperheroe provides a mock function with given fields: id, c, ctx
func (_m *Repository) EditSuperheroe(id string, c *entity.Superhero, ctx context.Context) (*entity.Superhero, error) {
	ret := _m.Called(id, c, ctx)

	var r0 *entity.Superhero
	if rf, ok := ret.Get(0).(func(string, *entity.Superhero, context.Context) *entity.Superhero); ok {
		r0 = rf(id, c, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Superhero)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *entity.Superhero, context.Context) error); ok {
		r1 = rf(id, c, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuperheroeById provides a mock function with given fields: id, ctx
func (_m *Repository) GetSuperheroeById(id string, ctx context.Context) (*entity.Superhero, error) {
	ret := _m.Called(id, ctx)

	var r0 *entity.Superhero
	if rf, ok := ret.Get(0).(func(string, context.Context) *entity.Superhero); ok {
		r0 = rf(id, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Superhero)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuperheroes provides a mock function with given fields: ctx
func (_m *Repository) GetSuperheroes(ctx context.Context) ([]*entity.Superhero, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Superhero
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Superhero); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Superhero)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
